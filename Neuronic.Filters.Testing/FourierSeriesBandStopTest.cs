using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neuronic.Filters.FIR;

namespace Neuronic.Filters.Testing
{
    [TestClass]
    public class FourierSeriesBandStopTest
    {
        private static void TestBandStop(int order, double fs, double f1, double f2, double[] expected, double error, bool scale, IWindow window)
        {
            var coeff = new BandStopFourierSeriesCoefficients(order, fs, f1, f2) { Window = window, UseScaling = scale };
            var chain = coeff.Calculate();

            Assert.AreEqual(expected.Length, chain.Count);
            for (int i = 0; i < expected.Length; i++)
                Assert.AreEqual(expected[i], chain[i], error);
        }

        [TestMethod]
        public void TestBandStop50Hamming()
        {
            const int order = 50;
            const double fs = 200d;
            const double f1 = 10d;
            const double f2 = 30d;
            const double error = 1e-3;

            var expected = new[]
            {
                0.002030, 0.001701, 0.000651, -0.000588, -0.001034, -0.000000, 0.001709, 0.001580, -0.002738, -0.010499, -0.016827, -0.015823, -0.006236, 0.005463, 0.009029, -0.000000, -0.012968, -0.011328, 0.018879, 0.071212, 0.115736, 0.115089, 0.051160, -0.056783, -0.158028, 0.797228, -0.158028, -0.056783, 0.051160, 0.115089, 0.115736, 0.071212, 0.018879, -0.011328, -0.012968, -0.000000, 0.009029, 0.005463, -0.006236, -0.015823, -0.016827, -0.010499, -0.002738, 0.001580, 0.001709, -0.000000, -0.001034, -0.000588, 0.000651, 0.001701, 0.002030
            };

            TestBandStop(order, fs, f1, f2, expected, error, true, Window.Hamming);
        }

        [TestMethod]
        public void TestBandStop50Rect()
        {
            const int order = 50;
            const double fs = 200d;
            const double f1 = 10d;
            const double f2 = 30d;
            const double error = 1e-5;

            var expected = new[]
            {
                0.025098, 0.020115, 0.006820, -0.005180, -0.007470, -0.000000, 0.008256, 0.006331, -0.009227, -0.030173, -0.041829, -0.034483, -0.012066, 0.009497, 0.014260, -0.000000, -0.017429, -0.014246, 0.022409, 0.080461, 0.125488, 0.120692, 0.052287, -0.056983, -0.156860, 0.788466, -0.156860, -0.056983, 0.052287, 0.120692, 0.125488, 0.080461, 0.022409, -0.014246, -0.017429, -0.000000, 0.014260, 0.009497, -0.012066, -0.034483, -0.041829, -0.030173, -0.009227, 0.006331, 0.008256, -0.000000, -0.007470, -0.005180, 0.006820, 0.020115, 0.025098
            };

            TestBandStop(order, fs, f1, f2, expected, error, true, Window.Rect);
        }

        [TestMethod]
        public void TestBandStop100HammingNoScale()
        {
            const int order = 100;
            const double fs = 200d;
            const double f1 = 10d;
            const double f2 = 30d;
            const double error = 1e-3;

            var expected = new[]
            {
                -0.000000, -0.000263, -0.000201, 0.000298, 0.001006, 0.001450, 0.001250, 0.000458, -0.000377, -0.000589, -0.000000, 0.000757, 0.000623, -0.000968, -0.003358, -0.004904, -0.004229, -0.001536, 0.001244, 0.001903, -0.000000, -0.002336, -0.001874, 0.002843, 0.009629, 0.013751, 0.011611, 0.004136, -0.003291, -0.004960, -0.000000, 0.005942, 0.004727, -0.007130, -0.024078, -0.034394, -0.029152, -0.010466, 0.008435, 0.012941, -0.000000, -0.016418, -0.013632, 0.021741, 0.079001, 0.124457, 0.120687, 0.052619, -0.057607, -0.159010, 0.800000, -0.159010, -0.057607, 0.052619, 0.120687, 0.124457, 0.079001, 0.021741, -0.013632, -0.016418, -0.000000, 0.012941, 0.008435, -0.010466, -0.029152, -0.034394, -0.024078, -0.007130, 0.004727, 0.005942, -0.000000, -0.004960, -0.003291, 0.004136, 0.011611, 0.013751, 0.009629, 0.002843, -0.001874, -0.002336, -0.000000, 0.001903, 0.001244, -0.001536, -0.004229, -0.004904, -0.003358, -0.000968, 0.000623, 0.000757, -0.000000, -0.000589, -0.000377, 0.000458, 0.001250, 0.001450, 0.001006, 0.000298, -0.000201, -0.000263, -0.000000
            };

            TestBandStop(order, fs, f1, f2, expected, error, false, Window.Hamming);
        }

        [TestMethod]
        public void TestBandStop100RectNoScale()
        {
            const int order = 100;
            const double fs = 200d;
            const double f1 = 10d;
            const double f2 = 30d;
            const double error = 1e-5;

            var expected = new[]
            {
                -0.000000, -0.003248, -0.002409, 0.003386, 0.010648, 0.014147, 0.011132, 0.003701, -0.002753, -0.003882, -0.000000, 0.004081, 0.003043, -0.004301, -0.013606, -0.018189, -0.014407, -0.004823, 0.003614, 0.005134, -0.000000, -0.005488, -0.004130, 0.005895, 0.018840, 0.025465, 0.020410, 0.006920, -0.005256, -0.007579, -0.000000, 0.008377, 0.006424, -0.009362, -0.030614, -0.042441, -0.034988, -0.012243, 0.009636, 0.014469, -0.000000, -0.017684, -0.014454, 0.022736, 0.081638, 0.127324, 0.122457, 0.053052, -0.057816, -0.159155, 0.800000, -0.159155, -0.057816, 0.053052, 0.122457, 0.127324, 0.081638, 0.022736, -0.014454, -0.017684, -0.000000, 0.014469, 0.009636, -0.012243, -0.034988, -0.042441, -0.030614, -0.009362, 0.006424, 0.008377, -0.000000, -0.007579, -0.005256, 0.006920, 0.020410, 0.025465, 0.018840, 0.005895, -0.004130, -0.005488, -0.000000, 0.005134, 0.003614, -0.004823, -0.014407, -0.018189, -0.013606, -0.004301, 0.003043, 0.004081, -0.000000, -0.003882, -0.002753, 0.003701, 0.011132, 0.014147, 0.010648, 0.003386, -0.002409, -0.003248, -0.000000
            };

            TestBandStop(order, fs, f1, f2, expected, error, false, Window.Rect);
        }
    }
}