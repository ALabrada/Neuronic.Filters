using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neuronic.Filters.FIR;

namespace Neuronic.Filters.Testing
{
    [TestClass]
    public class FourierSeriesHighPassTest
    {
        private static void TestHighPass(int order, double fs, double cutoffFrequency, double[] expected, double error, bool scale, IWindow window)
        {
            var coeff = new HighPassFourierSeriesCoefficients(order, fs, cutoffFrequency) { Window = window, UseScaling = scale };
            var chain = coeff.Calculate();

            Assert.AreEqual(expected.Length, chain.Count);
            for (int i = 0; i < expected.Length; i++)
                Assert.AreEqual(expected[i], chain[i], error);
        }

        [TestMethod]
        public void TestHighPass50Hamming()
        {
            const int order = 50;
            const double fs = 200d;
            const double cutoffFrequency = 10d;
            const double error = 1e-3;

            var expected = new[]
            {
                -0.001018, -0.001054, -0.001056, -0.000954, -0.000641, -0.000000, 0.001059, 0.002563, 0.004442, 0.006505, 0.008434, 0.009803, 0.010115, 0.008861, 0.005594, -0.000000, -0.008034, -0.018375, -0.030622, -0.044121, -0.058011, -0.071305, -0.082984, -0.092105, -0.097909, 0.899102, -0.097909, -0.092105, -0.082984, -0.071305, -0.058011, -0.044121, -0.030622, -0.018375, -0.008034, -0.000000, 0.005594, 0.008861, 0.010115, 0.009803, 0.008434, 0.006505, 0.004442, 0.002563, 0.001059, -0.000000, -0.000641, -0.000954, -0.001056, -0.001054, -0.001018
            };

            TestHighPass(order, fs, cutoffFrequency, expected, error, true, Window.Hamming);
        }

        [TestMethod]
        public void TestHighPass50Rect()
        {
            const int order = 50;
            const double fs = 200d;
            const double cutoffFrequency = 10d;
            const double error = 1e-5;

            var expected = new[]
            {
                -0.012576, -0.012458, -0.011059, -0.008400, -0.004626, -0.000000, 0.005113, 0.010266, 0.014962, 0.018688, 0.020959, 0.021357, 0.019565, 0.015399, 0.008832, -0.000000, -0.010795, -0.023099, -0.036335, -0.049834, -0.062878, -0.074750, -0.084782, -0.092397, -0.097152, 0.888914, -0.097152, -0.092397, -0.084782, -0.074750, -0.062878, -0.049834, -0.036335, -0.023099, -0.010795, -0.000000, 0.008832, 0.015399, 0.019565, 0.021357, 0.020959, 0.018688, 0.014962, 0.010266, 0.005113, -0.000000, -0.004626, -0.008400, -0.011059, -0.012458, -0.012576
            };

            TestHighPass(order, fs, cutoffFrequency, expected, error, true, Window.Rect);
        }

        [TestMethod]
        public void TestHighPass100HammingNoScale()
        {
            const int order = 100;
            const double fs = 200d;
            const double cutoffFrequency = 10d;
            const double error = 1e-3;

            var expected = new[]
            {
                0.000000, -0.000162, -0.000326, -0.000483, -0.000622, -0.000725, -0.000773, -0.000741, -0.000610, -0.000364, -0.000000, 0.000468, 0.001008, 0.001567, 0.002075, 0.002452, 0.002613, 0.002485, 0.002012, 0.001176, -0.000000, -0.001444, -0.003032, -0.004600, -0.005951, -0.006875, -0.007176, -0.006692, -0.005325, -0.003065, -0.000000, 0.003672, 0.007649, 0.011537, 0.014881, 0.017197, 0.018017, 0.016935, 0.013648, 0.007998, -0.000000, -0.010147, -0.022057, -0.035178, -0.048825, -0.062229, -0.074589, -0.085140, -0.093210, -0.098274, 0.900000, -0.098274, -0.093210, -0.085140, -0.074589, -0.062229, -0.048825, -0.035178, -0.022057, -0.010147, -0.000000, 0.007998, 0.013648, 0.016935, 0.018017, 0.017197, 0.014881, 0.011537, 0.007649, 0.003672, -0.000000, -0.003065, -0.005325, -0.006692, -0.007176, -0.006875, -0.005951, -0.004600, -0.003032, -0.001444, -0.000000, 0.001176, 0.002012, 0.002485, 0.002613, 0.002452, 0.002075, 0.001567, 0.001008, 0.000468, -0.000000, -0.000364, -0.000610, -0.000741, -0.000773, -0.000725, -0.000622, -0.000483, -0.000326, -0.000162, 0.000000
            };

            TestHighPass(order, fs, cutoffFrequency, expected, error, false, Window.Hamming);
        }

        [TestMethod]
        public void TestHighPass100RectNoScale()
        {
            const int order = 100;
            const double fs = 200d;
            const double cutoffFrequency = 10d;
            const double error = 1e-5;

            var expected = new[]
            {
                0.000000, -0.002007, -0.003898, -0.005479, -0.006581, -0.007074, -0.006880, -0.005989, -0.004455, -0.002399, -0.000000, 0.002522, 0.004924, 0.006960, 0.008409, 0.009095, 0.008904, 0.007804, 0.005847, 0.003173, -0.000000, -0.003392, -0.006682, -0.009538, -0.011643, -0.012732, -0.012614, -0.011196, -0.008504, -0.004684, -0.000000, 0.005177, 0.010394, 0.015148, 0.018921, 0.021221, 0.021624, 0.019809, 0.015591, 0.008942, -0.000000, -0.010929, -0.023387, -0.036788, -0.050455, -0.063662, -0.075683, -0.085839, -0.093549, -0.098363, 0.900000, -0.098363, -0.093549, -0.085839, -0.075683, -0.063662, -0.050455, -0.036788, -0.023387, -0.010929, -0.000000, 0.008942, 0.015591, 0.019809, 0.021624, 0.021221, 0.018921, 0.015148, 0.010394, 0.005177, -0.000000, -0.004684, -0.008504, -0.011196, -0.012614, -0.012732, -0.011643, -0.009538, -0.006682, -0.003392, -0.000000, 0.003173, 0.005847, 0.007804, 0.008904, 0.009095, 0.008409, 0.006960, 0.004924, 0.002522, -0.000000, -0.002399, -0.004455, -0.005989, -0.006880, -0.007074, -0.006581, -0.005479, -0.003898, -0.002007, 0.000000
            };

            TestHighPass(order, fs, cutoffFrequency, expected, error, false, Window.Rect);
        }
    }
}