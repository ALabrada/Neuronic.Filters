using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neuronic.Filters.FIR;
using System.Collections.Generic;

namespace Neuronic.Filters.Testing
{
    [TestClass]
    public class FourierSeriesLowPassTest
    {
        private static void TestLowPass(int order, double fs, double cutoffFrequency, double[] expected, double error, bool scale, IWindow window)
        {
            var coeff = new LowPassFourierSeriesCoefficients(order, fs, cutoffFrequency) { Window = window, UseScaling = scale };
            var chain = coeff.Calculate();

            Assert.AreEqual(expected.Length, chain.Count);
            for (int i = 0; i < expected.Length; i++)
                Assert.AreEqual(expected[i], chain[i], error);
        }

        [TestMethod]
        public void TestLowPass50Hamming()
        {
            const int order = 50;
            const double fs = 200d;
            const double cutoffFrequency = 30d;
            const double error = 1e-3;

            var expected = new[]
            {
                -0.001020, -0.000653, 0.000404, 0.001547, 0.001680, -0.000000, -0.002777, -0.004154, -0.001700, 0.004028, 0.008451, 0.006070, -0.003871, -0.014365, -0.014674, 0.000000, 0.021075, 0.029790, 0.011719, -0.027321, -0.058124, -0.044155, 0.031759, 0.149320, 0.256828, 0.300285, 0.256828, 0.149320, 0.031759, -0.044155, -0.058124, -0.027321, 0.011719, 0.029790, 0.021075, 0.000000, -0.014674, -0.014365, -0.003871, 0.006070, 0.008451, 0.004028, -0.001700, -0.004154, -0.002777, -0.000000, 0.001680, 0.001547, 0.000404, -0.000653, -0.001020
            };

            TestLowPass(order, fs, cutoffFrequency, expected, error, true, Window.Hamming);
        }

        [TestMethod]
        public void TestLowPass50Rect()
        {
            const int order = 50;
            const double fs = 200d;
            const double cutoffFrequency = 30d;
            const double error = 1e-5;

            var expected = new[]
            {
                -0.012881, -0.007887, 0.004326, 0.013921, 0.012406, -0.000000, -0.013711, -0.017014, -0.005853, 0.011830, 0.021468, 0.013520, -0.007654, -0.025521, -0.023683, 0.000000, 0.028946, 0.038282, 0.014215, -0.031546, -0.064403, -0.047319, 0.033169, 0.153128, 0.260516, 0.303493, 0.260516, 0.153128, 0.033169, -0.047319, -0.064403, -0.031546, 0.014215, 0.038282, 0.028946, 0.000000, -0.023683, -0.025521, -0.007654, 0.013520, 0.021468, 0.011830, -0.005853, -0.017014, -0.013711, -0.000000, 0.012406, 0.013921, 0.004326, -0.007887, -0.012881
            };

            TestLowPass(order, fs, cutoffFrequency, expected, error, true, Window.Rect);
        }

        [TestMethod]
        public void TestLowPass99HammingNoScale()
        {
            const int order = 99;
            const double fs = 200d;
            const double cutoffFrequency = 30d;
            const double error = 1e-3;

            var expected = new[]
            {
                0.000234, 0.000525, 0.000397, -0.000095, -0.000591, -0.000656, -0.000129, 0.000660, 0.001046, 0.000546, -0.000620, -0.001532, -0.001243, 0.000311, 0.001997, 0.002246, 0.000442, -0.002235, -0.003482, -0.001781, 0.001976, 0.004761, 0.003766, -0.000919, -0.005763, -0.006336, -0.001221, 0.006057, 0.009274, 0.004671, -0.005117, -0.012197, -0.009573, 0.002324, 0.014543, 0.016011, 0.003103, -0.015534, -0.024135, -0.012408, 0.013978, 0.034571, 0.028476, -0.007365, -0.050136, -0.061851, -0.014066, 0.089511, 0.209157, 0.288952, 0.288952, 0.209157, 0.089511, -0.014066, -0.061851, -0.050136, -0.007365, 0.028476, 0.034571, 0.013978, -0.012408, -0.024135, -0.015534, 0.003103, 0.016011, 0.014543, 0.002324, -0.009573, -0.012197, -0.005117, 0.004671, 0.009274, 0.006057, -0.001221, -0.006336, -0.005763, -0.000919, 0.003766, 0.004761, 0.001976, -0.001781, -0.003482, -0.002235, 0.000442, 0.002246, 0.001997, 0.000311, -0.001243, -0.001532, -0.000620, 0.000546, 0.001046, 0.000660, -0.000129, -0.000656, -0.000591, -0.000095, 0.000397, 0.000525, 0.000234
            };

            TestLowPass(order, fs, cutoffFrequency, expected, error, false, Window.Hamming);
        }

        [TestMethod]
        public void TestLowPass99RectNoScale()
        {
            const int order = 99;
            const double fs = 200d;
            const double cutoffFrequency = 30d;
            const double error = 1e-5;

            var expected = new[]
            {
                0.002919, 0.006482, 0.004739, -0.001071, -0.006233, -0.006373, -0.001145, 0.005296, 0.007576, 0.003568, -0.003658, -0.008166, -0.006002, 0.001364, 0.007989, 0.008221, 0.001486, -0.006926, -0.009981, -0.004738, 0.004899, 0.011031, 0.008185, -0.001879, -0.011122, -0.011576, -0.002119, 0.010004, 0.014623, 0.007049, -0.007411, -0.016994, -0.012862, 0.003018, 0.018298, 0.019560, 0.003688, -0.018006, -0.027338, -0.013763, 0.015212, 0.036987, 0.030011, -0.007661, -0.051567, -0.063026, -0.014227, 0.090032, 0.209594, 0.289019, 0.289019, 0.209594, 0.090032, -0.014227, -0.063026, -0.051567, -0.007661, 0.030011, 0.036987, 0.015212, -0.013763, -0.027338, -0.018006, 0.003688, 0.019560, 0.018298, 0.003018, -0.012862, -0.016994, -0.007411, 0.007049, 0.014623, 0.010004, -0.002119, -0.011576, -0.011122, -0.001879, 0.008185, 0.011031, 0.004899, -0.004738, -0.009981, -0.006926, 0.001486, 0.008221, 0.007989, 0.001364, -0.006002, -0.008166, -0.003658, 0.003568, 0.007576, 0.005296, -0.001145, -0.006373, -0.006233, -0.001071, 0.004739, 0.006482, 0.002919
            };

            TestLowPass(order, fs, cutoffFrequency, expected, error, false, Window.Rect);
        }
    }
}